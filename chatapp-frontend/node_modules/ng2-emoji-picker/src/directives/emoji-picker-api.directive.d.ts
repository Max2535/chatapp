import { ComponentFactoryResolver, ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import 'rxjs/add/operator/takeUntil';
import 'rxjs/add/operator/distinctUntilChanged';
import * as ɵngcc0 from '@angular/core';
export declare class EmojiPickerApiDirective {
    private _cfr;
    private _vcr;
    private _el;
    /** [emojiPickerPreserveSelection]="true || false" preserves or forgets prexisting selection while toggling picker */
    emojiPickerPreserveSelection: boolean;
    emojiPickerIfEmitter: EventEmitter<boolean>;
    /** (emojiPickerSelect)="eventHandler($event)" // emits emoji picking event */
    selectEmitter: EventEmitter<{}>;
    /** [emojiPickerAutofocus]="true || false"  */
    emojiPickerAutofocus: boolean;
    private _directionCode;
    private _emojiPickerOpenState;
    private _destroyed;
    private _emojiPickerFactory;
    private _emojiPickerRef;
    private _emojiSubs;
    private _recordedSelection;
    constructor(_cfr: ComponentFactoryResolver, _vcr: ViewContainerRef, _el: ElementRef);
    /** [emojiPickerDirection]="'top' || 'bottom' || 'left' || 'right'" defaults to 'bottom' */
    emojiPickerDirection: string;
    /** [(emojiPickerIf)]="true || false" opens up or closes the picker */
    emojiPickerIf: boolean;
    openPicker(): void;
    closePicker(): void;
    recordSelection(): any;
    restoreSelection(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<EmojiPickerApiDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<EmojiPickerApiDirective, "[emojiPickerIf]", never, { "emojiPickerDirection": "emojiPickerDirection"; "emojiPickerIf": "emojiPickerIf"; "emojiPickerPreserveSelection": "emojiPickerPreserveSelection"; "emojiPickerAutofocus": "emojiPickerAutofocus"; }, { "emojiPickerIfEmitter": "emojiPickerIfChange"; "selectEmitter": "emojiPickerSelect"; }, never>;
}

//# sourceMappingURL=emoji-picker-api.directive.d.ts.map